const Order = require("../models/OrderProduct");
const Product = require("../models/ProductModel");
const EmailService = require("./EmailService");
const createOrder = (newOrder) => {
    return new Promise(async (resolve, reject) => {
        const {
            orderItems,
            paymentMethod,
            itemsPrice,
            shippingPrice,
            totalPrice,
            fullName,
            address,
            city,
            phone,
            user,
            delivery,
            discount = 0,
            country,
            taxPrice = 0,
            email
        } = newOrder;

        try {
            // ‚úÖ B∆∞·ªõc 1: Ki·ªÉm tra t·ªìn kho cho t·∫•t c·∫£ s·∫£n ph·∫©m
            for (const item of orderItems) {
                const product = await Product.findById(item.product);
                if (!product || product.countInStock < item.amount) {
                    return resolve({
                        status: "ERR",
                        message: `S·∫£n ph·∫©m "${product?.name || item.product}" kh√¥ng ƒë·ªß h√†ng trong kho`,
                    });
                }
            }

            // ‚úÖ B∆∞·ªõc 2: Gi·∫£m s·ªë l∆∞·ª£ng t·ªìn kho & tƒÉng selled cho t·ª´ng s·∫£n ph·∫©m
            for (const item of orderItems) {
                await Product.findByIdAndUpdate(item.product, {
                    $inc: {
                        countInStock: -item.amount,
                        selled: +item.amount,
                    },
                });
            }

            // ‚úÖ B∆∞·ªõc 3: T·∫°o 1 ƒë∆°n h√†ng duy nh·∫•t
            const createdOrder = await Order.create({
                orderItems,
                shippingAddress: {
                    fullName,
                    address,
                    city,
                    country,
                    phone,
                },
                paymentMethod,
                delivery,
                itemsPrice,
                shippingPrice,
                taxPrice,
                totalPrice,
                user,
                discount,
            });

            if (!createdOrder) {
                return resolve({
                    status: "ERR",
                    message: "Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng",
                });
            }
            await EmailService.sendEmailCreateOrder(email, orderItems);
            resolve({
                status: "OK",
                message: "T·∫°o ƒë∆°n h√†ng th√†nh c√¥ng",
                data: createdOrder,
            });

        } catch (e) {
            console.error("‚ùå L·ªói khi t·∫°o ƒë∆°n h√†ng:", e);
            reject(e);
        }
    });
};

const getAllOrderDetails = async (userId) => {
    try {
        if (!userId) {
            return {
                status: 'ERR',
                message: 'Thi·∫øu userId',
            };
        }

        const orders = await Order.find({ user: userId })
            .populate({
                path: 'orderItems.product',
                select: 'name price discount image countInStock selled', // ‚úÖ th√™m discount & image
            })
            .sort({ createdAt: -1 }); // ‚úÖ m·ªõi nh·∫•t l√™n ƒë·∫ßu

        if (!orders || orders.length === 0) {
            return {
                status: 'ERR',
                message: 'Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o cho ng∆∞·ªùi d√πng n√†y',
            };
        }

        return {
            status: 'OK',
            message: 'L·∫•y chi ti·∫øt ƒë∆°n h√†ng th√†nh c√¥ng',
            data: orders,
        };
    } catch (error) {
        return {
            status: 'ERR',
            message: error.message || 'L·ªói m√°y ch·ªß',
        };
    }
};

const getDetailsOrder = (id) => {
    return new Promise(async (resolve, reject) => {
        try {
            const order = await Order.findById(id).populate('orderItems.product')


            if (!order) {
                return resolve({
                    status: 'ERR',
                    message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng n√†y',
                });
            }

            resolve({
                status: 'OK',
                message: 'L·∫•y chi ti·∫øt ƒë∆°n h√†ng th√†nh c√¥ng',
                data: order,
            });
        } catch (e) {
            reject(e);
        }
    });
};
const cancelOrder = (id, data) => {
    return new Promise(async (resolve, reject) => {
        try {
            // ‚úÖ Tr·∫£ l·∫°i h√†ng cho kho (tƒÉng l·∫°i countInStock)
            for (const orderItem of data.orderItems) {
                await Product.findByIdAndUpdate(
                    orderItem.product,
                    {
                        $inc: {
                            countInStock: orderItem.amount, // tƒÉng s·ªë l∆∞·ª£ng t·ªìn
                            selled: -orderItem.amount,       // gi·∫£m s·ªë l∆∞·ª£ng ƒë√£ b√°n
                        },
                    },
                    { new: true }
                );
            }

            // ‚úÖ X√≥a ƒë∆°n h√†ng kh·ªèi DB
            const deletedOrder = await Order.findByIdAndDelete(id);

            if (!deletedOrder) {
                return resolve({
                    status: 'ERR',
                    message: 'Order not found',
                });
            }

            resolve({
                status: 'OK',
                message: 'Order has been cancelled and deleted successfully',
            });
        } catch (error) {
            reject(error);
        }
    });
};
const getAllOrder = () => {
    return new Promise(async (resolve, reject) => {
        try {
            const allOrder = await Order.find()
                .populate('user', 'fullName phone email'); // ‚úÖ th√™m d√≤ng n√†y

            resolve({
                status: 'OK',
                message: 'Success',
                data: allOrder
            });
        } catch (e) {
            reject(e);
        }
    });
};



const updateOrder = async (orderId, data) => {
    try {
        const order = await Order.findById(orderId);
        if (!order) {
            return {
                status: 'ERR',
                message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng',
            };
        }

        // üü¢ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng theo status g·ª≠i t·ª´ frontend
        if (data.status === 'ƒê√£ thanh to√°n') {
            order.isPaid = true;
            order.isDelivered = false;
            order.isCancelled = false;
            order.paidAt = Date.now();
        } else if (data.status === 'ƒê√£ giao h√†ng') {
            order.isDelivered = true;
            order.isPaid = true;
            order.isCancelled = false;
        } else if (data.status === 'ƒê√£ h·ªßy') {
            order.isCancelled = true;
            order.isDelivered = false;
            order.isPaid = false;
        } else {
            // ƒêang x·ª≠ l√Ω
            order.isDelivered = false;
            order.isPaid = false;
            order.isCancelled = false;
        }

        // üü¢ Gi·ªØ nguy√™n th√¥ng tin kh√°ch h√†ng, ph∆∞∆°ng th·ª©c thanh to√°n, t·ªïng ti·ªÅn, v.v.
        if (data.fullName) order.shippingAddress.fullName = data.fullName;
        if (data.phone) order.shippingAddress.phone = data.phone;
        if (data.address) order.shippingAddress.address = data.address;
        if (data.delivery) order.delivery = data.delivery;
        if (data.paymentMethod) order.paymentMethod = data.paymentMethod;
        if (data.totalPrice) order.totalPrice = data.totalPrice;

        const updatedOrder = await order.save();

        return {
            status: 'OK',
            message: 'C·∫≠p nh·∫≠t ƒë∆°n h√†ng th√†nh c√¥ng',
            data: updatedOrder,
        };
    } catch (e) {
        return {
            status: 'ERR',
            message: e.message || 'L·ªói khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng',
        };
    }
};


module.exports = {
    createOrder, getAllOrderDetails,
    getDetailsOrder, cancelOrder, getAllOrder, updateOrder
};
